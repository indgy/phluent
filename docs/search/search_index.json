{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Phluent A dependency free lightweight fluent SQL query builder using PDO. There are two classes: Query generates SQL and tracks parameter values using fluent methods. DB performs SQL queries using PDO. An extension handling relationships using the Data Mapper & Entity paradigm is planned for release at a later date. Note Phluent uses PDO under the hood but has only been tested against MariaDB, MySQL. PostgreSQL and SQLite may be supported but are not currently tested.","title":"Introduction"},{"location":"#phluent","text":"A dependency free lightweight fluent SQL query builder using PDO. There are two classes: Query generates SQL and tracks parameter values using fluent methods. DB performs SQL queries using PDO. An extension handling relationships using the Data Mapper & Entity paradigm is planned for release at a later date. Note Phluent uses PDO under the hood but has only been tested against MariaDB, MySQL. PostgreSQL and SQLite may be supported but are not currently tested.","title":"Phluent"},{"location":"db/","text":"Using DB DB extends Query and inherits all the fluent SQL build methods while adding the following methods for interacting with the database via PDO. The following methods can be used to query the database: raw(String $sql, ?Array $params) Returns a PDOStatement query(String $sql, ?Array $params) Returns the same DB instance, then use: getOne() Returns a single object representing a result row get() Returns an array of objects representing the result row DB also changes the way that aggregate methods are used.","title":"Using DB"},{"location":"db/#using-db","text":"DB extends Query and inherits all the fluent SQL build methods while adding the following methods for interacting with the database via PDO. The following methods can be used to query the database: raw(String $sql, ?Array $params) Returns a PDOStatement query(String $sql, ?Array $params) Returns the same DB instance, then use: getOne() Returns a single object representing a result row get() Returns an array of objects representing the result row DB also changes the way that aggregate methods are used.","title":"Using DB"},{"location":"getting-started/","text":"Getting started Installation Phluent can be used as a composer package or a single file download and included into your project. Using Composer $ composer require indgy/phluent Standalone Use the standalong Phluent.php file in the dist folder which combines Query, DB and the functions files into one. cp dist/Phluent.php /path/to/your/project Then require it where needed in your project: require(\"/path/to/your/project/Phluent.php\"); Creating a PDO connection DB requires a PDO connection to your database. $dsn = 'mysql:host=localhost;port=3306;dbname=database;charset=utf8mb4'; $pdo = new \\PDO($dsn, 'username', 'password', [ \\PDO::ATTR_ERRMODE => \\PDO::ERRMODE_EXCEPTION, \\PDO::ATTR_DEFAULT_FETCH_MODE => \\PDO::FETCH_ASSOC, \\PDO::ATTR_EMULATE_PREPARES => true, ]); You can now use DB to perform SQL queries on the database: $db = new DB($pdo); $db->query(\"SELECT * FROM `movies` WHERE `title` LIKE '%Muppets%'\"); foreach ($db->get() as $movie) { echo \"{$movie->title} was released in {$movie->year}\"; } Read the Query guide for more details on generating SQL. Note The PDO guide at PHP delusions is a good read.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Phluent can be used as a composer package or a single file download and included into your project.","title":"Installation"},{"location":"getting-started/#using-composer","text":"$ composer require indgy/phluent","title":"Using Composer"},{"location":"getting-started/#standalone","text":"Use the standalong Phluent.php file in the dist folder which combines Query, DB and the functions files into one. cp dist/Phluent.php /path/to/your/project Then require it where needed in your project: require(\"/path/to/your/project/Phluent.php\");","title":"Standalone"},{"location":"getting-started/#creating-a-pdo-connection","text":"DB requires a PDO connection to your database. $dsn = 'mysql:host=localhost;port=3306;dbname=database;charset=utf8mb4'; $pdo = new \\PDO($dsn, 'username', 'password', [ \\PDO::ATTR_ERRMODE => \\PDO::ERRMODE_EXCEPTION, \\PDO::ATTR_DEFAULT_FETCH_MODE => \\PDO::FETCH_ASSOC, \\PDO::ATTR_EMULATE_PREPARES => true, ]); You can now use DB to perform SQL queries on the database: $db = new DB($pdo); $db->query(\"SELECT * FROM `movies` WHERE `title` LIKE '%Muppets%'\"); foreach ($db->get() as $movie) { echo \"{$movie->title} was released in {$movie->year}\"; } Read the Query guide for more details on generating SQL. Note The PDO guide at PHP delusions is a good read.","title":"Creating a PDO connection"},{"location":"query/","text":"Using Query Query is a simple fluent query builder, it has no connection to a database and only aims to produce correct SQL statements while tracking any required parameters. Query follows the syntax of SQL wherever possible aiming to offer lots of shorthand methods to make writing SQL statements as easy as possible. Query has two return methods, getSql() which returns the parameterised SQL statement and getParams() which returns the parameters to be escaped. Note Query aims to support the majority of SQL clauses but is not comprehensive. If you need more control use the raw() and query() methods on the DB class. Retrieving the SQL statement and parameters Query only generates SQL tracking the required query parameters. It has two methods which provide access, getSql() which returns the SQL statement and getParams() which returns an indexed array of parameters. getSql() Returns the parameterised SQL statement. $sql = $query->getSql(); /* SELECT `movies`.`title`,`movies`.`year` FROM `movies` WHERE `movies`.`title`=? */ getParams() Returns the parameter values as an indexed array. $params = $query->getParams(); // ['The Lego Movie']","title":"Using Query"},{"location":"query/#using-query","text":"Query is a simple fluent query builder, it has no connection to a database and only aims to produce correct SQL statements while tracking any required parameters. Query follows the syntax of SQL wherever possible aiming to offer lots of shorthand methods to make writing SQL statements as easy as possible. Query has two return methods, getSql() which returns the parameterised SQL statement and getParams() which returns the parameters to be escaped. Note Query aims to support the majority of SQL clauses but is not comprehensive. If you need more control use the raw() and query() methods on the DB class.","title":"Using Query"},{"location":"query/#retrieving-the-sql-statement-and-parameters","text":"Query only generates SQL tracking the required query parameters. It has two methods which provide access, getSql() which returns the SQL statement and getParams() which returns an indexed array of parameters.","title":"Retrieving the SQL statement and parameters"},{"location":"query/#getsql","text":"Returns the parameterised SQL statement. $sql = $query->getSql(); /* SELECT `movies`.`title`,`movies`.`year` FROM `movies` WHERE `movies`.`title`=? */","title":"getSql()"},{"location":"query/#getparams","text":"Returns the parameter values as an indexed array. $params = $query->getParams(); // ['The Lego Movie']","title":"getParams()"},{"location":"db/changed-query-methods/","text":"Changes from Query Additional aggregate methods In addition to the Query aggregate methods which can still be used, the following methods will return a numeric value of an aggregate function; getAvg() , getMin() , getMax() , getSum() . $result = $db->table('movies')->getAvg('year'); // 1996 $result = $db->table('movies')->getMax('year'); // 2020 $result = $db->table('movies')->getMin('year'); // 1921 The getCount() method now returns an Integer representing the number of rows in the result. $result = $db->table('movies')->getCount(); // 4803 $result = $db->table('movies')->where('title', 2001)->getCount(); // 1 The getExists() method is similar to getCount() but returns a Boolean value. $result = $db->table('movies')->where('title', 2001)->getExists(); // true $result = $db->table('movies')->where('title', 5001)->getExists(); // false Data operations The insert() , update() and delete() methods now operate on the table returning the number of rows affected by the operation. $affected_rows = $db->insert($items); $affected_rows = $db->update($items); $affected_rows = $db->delete($items); Use the insertGetId() method to return the id of the new row. $item->id = $db->insertGetId($item); // using a loop to get multiple ids foreach ($items as $item) { $item->id = $db->insertGetId($item); }","title":"Changed Query methods"},{"location":"db/changed-query-methods/#changes-from-query","text":"","title":"Changes from Query"},{"location":"db/changed-query-methods/#additional-aggregate-methods","text":"In addition to the Query aggregate methods which can still be used, the following methods will return a numeric value of an aggregate function; getAvg() , getMin() , getMax() , getSum() . $result = $db->table('movies')->getAvg('year'); // 1996 $result = $db->table('movies')->getMax('year'); // 2020 $result = $db->table('movies')->getMin('year'); // 1921 The getCount() method now returns an Integer representing the number of rows in the result. $result = $db->table('movies')->getCount(); // 4803 $result = $db->table('movies')->where('title', 2001)->getCount(); // 1 The getExists() method is similar to getCount() but returns a Boolean value. $result = $db->table('movies')->where('title', 2001)->getExists(); // true $result = $db->table('movies')->where('title', 5001)->getExists(); // false","title":"Additional aggregate methods"},{"location":"db/changed-query-methods/#data-operations","text":"The insert() , update() and delete() methods now operate on the table returning the number of rows affected by the operation. $affected_rows = $db->insert($items); $affected_rows = $db->update($items); $affected_rows = $db->delete($items); Use the insertGetId() method to return the id of the new row. $item->id = $db->insertGetId($item); // using a loop to get multiple ids foreach ($items as $item) { $item->id = $db->insertGetId($item); }","title":"Data operations"},{"location":"db/logging/","text":"Logging queries DB will log all queries executed after the log() method is called $db->log()->table('movies')->delete(); To retrieve the log and stop logging call the getLog() method. echo $db->getLog(); // DELETE FROM `movies` Logging continues until the getLog() method is called. To continue call the log() method again. $db->log()->table('movies')->delete(); $db->table('directors')->delete(); echo $db->getLog(); // DELETE FROM `movies` // DELETE FROM `directors`","title":"Logging"},{"location":"db/logging/#logging-queries","text":"DB will log all queries executed after the log() method is called $db->log()->table('movies')->delete(); To retrieve the log and stop logging call the getLog() method. echo $db->getLog(); // DELETE FROM `movies` Logging continues until the getLog() method is called. To continue call the log() method again. $db->log()->table('movies')->delete(); $db->table('directors')->delete(); echo $db->getLog(); // DELETE FROM `movies` // DELETE FROM `directors`","title":"Logging queries"},{"location":"db/performing-queries/","text":"Performing queries There are two methods that allow the passing of raw SQL statements and parameters, query() and raw() . Both expect the SQL statement as the first parameter and an array of values as the second. Using query() The query() method tracks the PDOStatment internally allowing you to continue using the DB methods. // query(String $sql, Array $params) : DB $db->query('SELECT * FROM `movies` WHERE `year`=? AND `rating`>?', [2020, 8]); echo $db->getRowCount(); Using raw() The raw() method returns the PDOStatement for you to manage. // raw(String $sql, Array $params) : PDOStatement $stmt = $db->raw('SELECT * FROM `movies` WHERE `year`=? AND `rating`>?', [2020, 8]); foreach ($stmt->fetchAll() as $row) { echo $row->title; } Warning When using query() or raw() directly any passed parameters will be escaped by PDO as expected but it is up to you to ensure that your SQL is safe to execute. Note All your parameter data is passed to PDO to be escaped as expected, however all references to tables or columns are also sanitised and only specific characters are allowed, these are a-z, 0-9 and the underscore. If you require other characters you may use the addReferenceChars() method to add more.","title":"Performing Queries"},{"location":"db/performing-queries/#performing-queries","text":"There are two methods that allow the passing of raw SQL statements and parameters, query() and raw() . Both expect the SQL statement as the first parameter and an array of values as the second.","title":"Performing queries"},{"location":"db/performing-queries/#using-query","text":"The query() method tracks the PDOStatment internally allowing you to continue using the DB methods. // query(String $sql, Array $params) : DB $db->query('SELECT * FROM `movies` WHERE `year`=? AND `rating`>?', [2020, 8]); echo $db->getRowCount();","title":"Using query()"},{"location":"db/performing-queries/#using-raw","text":"The raw() method returns the PDOStatement for you to manage. // raw(String $sql, Array $params) : PDOStatement $stmt = $db->raw('SELECT * FROM `movies` WHERE `year`=? AND `rating`>?', [2020, 8]); foreach ($stmt->fetchAll() as $row) { echo $row->title; } Warning When using query() or raw() directly any passed parameters will be escaped by PDO as expected but it is up to you to ensure that your SQL is safe to execute. Note All your parameter data is passed to PDO to be escaped as expected, however all references to tables or columns are also sanitised and only specific characters are allowed, these are a-z, 0-9 and the underscore. If you require other characters you may use the addReferenceChars() method to add more.","title":"Using raw()"},{"location":"db/transactions/","text":"Transactions The DB class supports two different ways of handling transactions. Manually by calling the beginTransaction() and commit() or rollback() methods. Or automatically by using the transaction() method which wraps a closure defining the set of operations to carry out. Automatic transaction handling Using the transaction() method is the simplest way to handle transactions. If the operations are successful the commit() method wil be called, if any of the operations fail the rollback() method will be called and any Exceptions thrown. $db->transaction(function() { $db->table('movies')->where('title', 2001)->update([ 'rating' => 8.5 ]); $db->table('movies')->where('title', 2010)->delete(); }); Manual transaction handling If you want more fine grained control you may call the transaction methods manually, these are just wrappers around the PDO transaction methods. $db->beginTransaction(); Rollback the transaction if necessary: $db->rollBack(); Or commit to storage: $db->commit();","title":"Transactions"},{"location":"db/transactions/#transactions","text":"The DB class supports two different ways of handling transactions. Manually by calling the beginTransaction() and commit() or rollback() methods. Or automatically by using the transaction() method which wraps a closure defining the set of operations to carry out.","title":"Transactions"},{"location":"db/transactions/#automatic-transaction-handling","text":"Using the transaction() method is the simplest way to handle transactions. If the operations are successful the commit() method wil be called, if any of the operations fail the rollback() method will be called and any Exceptions thrown. $db->transaction(function() { $db->table('movies')->where('title', 2001)->update([ 'rating' => 8.5 ]); $db->table('movies')->where('title', 2010)->delete(); });","title":"Automatic transaction handling"},{"location":"db/transactions/#manual-transaction-handling","text":"If you want more fine grained control you may call the transaction methods manually, these are just wrappers around the PDO transaction methods. $db->beginTransaction(); Rollback the transaction if necessary: $db->rollBack(); Or commit to storage: $db->commit();","title":"Manual transaction handling"},{"location":"query/debugging/","text":"Debugging queries To get a more accurate representation of the SQL statement pass the parameters into the getSql() method: $sql = $query->getSql($query->getParams()); /* SELECT `movies`.`title`,`movies`.`year` FROM `movies` WHERE `movies`.`title`='The Lego Movie' */ You may also call the debug() method which will also output the current SQL statement but also accepts a boolean flag which if true will halt execution after outputting the statement: $sql = $query->select('*')->from('movies')->where('title', 'The Lego Movie')->debug(true); /* Query debug: SELECT * FROM `movies` WHERE `movies`.`title`='The Lego Movie' // execution stops as true was passed to debug() */ Note Due to the way parameters are escaped the returned statement may not be the actual query that is performed in the database, for further investigate you will need to check the database logs. Danger This feature is provided for debugging only. Do not use the generated SQL to execute queries using untrusted data! The passed parameters are not escaped and may be used to attack the database.","title":"Debugging"},{"location":"query/debugging/#debugging-queries","text":"To get a more accurate representation of the SQL statement pass the parameters into the getSql() method: $sql = $query->getSql($query->getParams()); /* SELECT `movies`.`title`,`movies`.`year` FROM `movies` WHERE `movies`.`title`='The Lego Movie' */ You may also call the debug() method which will also output the current SQL statement but also accepts a boolean flag which if true will halt execution after outputting the statement: $sql = $query->select('*')->from('movies')->where('title', 'The Lego Movie')->debug(true); /* Query debug: SELECT * FROM `movies` WHERE `movies`.`title`='The Lego Movie' // execution stops as true was passed to debug() */ Note Due to the way parameters are escaped the returned statement may not be the actual query that is performed in the database, for further investigate you will need to check the database logs. Danger This feature is provided for debugging only. Do not use the generated SQL to execute queries using untrusted data! The passed parameters are not escaped and may be used to attack the database.","title":"Debugging queries"},{"location":"query/deleting/","text":"Deleting The delete() method generates SQL to remove rows from a table, it can be combined with any of the where() methods, the orderBy() and limit() methods. Important The delete() method should be called last. Delete queries Deleting all rows in a table $query->table('movies')->delete(); // DELETE FROM `movies` Deleting a subset of rows in a table $query->table('movies')->where('year', '<', 1984)->delete(); // DELETE FROM `movies` WHERE `year` < 1984 Limiting the number of deleted rows $query->table('movies')->where('year', '<', 1984)->limit(10)->delete(); // DELETE FROM `movies` WHERE `movies`.`year` < 1984 LIMIT 10 Ordering the rows for deletion $query->table('movies')->where('year', '<', 1984)->orderBy('year', 'DESC')->limit(10)->delete(); // DELETE FROM `movies` WHERE `movies`.`year` < 1984 ORDER BY `movies`.`year` DESC LIMIT 10 Truncate queries The truncate() method generates SQL to reset a table removing all rows and resetting any increment columns back to zero. Important The truncate() method should be called last. Truncating a table $query->table('movies')->truncate(); // TRUNCATE TABLE `movies`","title":"Deleting rows"},{"location":"query/deleting/#deleting","text":"The delete() method generates SQL to remove rows from a table, it can be combined with any of the where() methods, the orderBy() and limit() methods. Important The delete() method should be called last.","title":"Deleting"},{"location":"query/deleting/#delete-queries","text":"","title":"Delete queries"},{"location":"query/deleting/#deleting-all-rows-in-a-table","text":"$query->table('movies')->delete(); // DELETE FROM `movies`","title":"Deleting all rows in a table"},{"location":"query/deleting/#deleting-a-subset-of-rows-in-a-table","text":"$query->table('movies')->where('year', '<', 1984)->delete(); // DELETE FROM `movies` WHERE `year` < 1984","title":"Deleting a subset of rows in a table"},{"location":"query/deleting/#limiting-the-number-of-deleted-rows","text":"$query->table('movies')->where('year', '<', 1984)->limit(10)->delete(); // DELETE FROM `movies` WHERE `movies`.`year` < 1984 LIMIT 10","title":"Limiting the number of deleted rows"},{"location":"query/deleting/#ordering-the-rows-for-deletion","text":"$query->table('movies')->where('year', '<', 1984)->orderBy('year', 'DESC')->limit(10)->delete(); // DELETE FROM `movies` WHERE `movies`.`year` < 1984 ORDER BY `movies`.`year` DESC LIMIT 10","title":"Ordering the rows for deletion"},{"location":"query/deleting/#truncate-queries","text":"The truncate() method generates SQL to reset a table removing all rows and resetting any increment columns back to zero. Important The truncate() method should be called last.","title":"Truncate queries"},{"location":"query/deleting/#truncating-a-table","text":"$query->table('movies')->truncate(); // TRUNCATE TABLE `movies`","title":"Truncating a table"},{"location":"query/examples/","text":"Query examples Query reads very much as a hand coded SQL statement would: $query = new Query; $query->select('title, year')->from('movies')->where('title', 'The Lego Movie'); Query has a handy shortcut which returns a new Query instance: query()->select('title, year')->from('movies')->where('title', 'The Lego Movie'); The shortcut accepts a table name as it's only parameter: query('movies')->select('title, year')->where('title', 'The Lego Movie'); Most clauses are supported, including JOIN, ORDER BY, GROUP BY and WHERE allowing complex queries to be created: $query->select('title, directors.name') ->from('movies') ->join('directors') ->where('movies.title', 'LIKE', 'The Lego Movie%') ->groupBy('directors.name') ->orderBy('year'); /* SELECT `movies`.`title`,`directors`.`name` FROM `movies` JOIN `directors` ON `movies`.`id`=`directors`.`movies_id` WHERE `movies`.`title` LIKE %s GROUP BY `directors`.`name` ORDER BY `movies`.`year` */ The eagle eyed may notice that directors should really be a many-many relationship. It is possible to group where clauses by nesting them: // pass a lambda function as the first parameter // it will receive a new instance of Query as it's first parameter $query->select('title, year') ->from('movies') ->where(function($query) { $query->where('title', 'like' ,'A %'); $query->orWhere('title', 'like' ,'The %'); }) ->orderBy('year'); Multi level nesting is possible: $query->select('title, year') ->from('movies') ->where(function($query) { $query->where('title', 'like' ,'The %'); $query->orWhere(function($query) { $query->where('title', 'like' ,'A %'); $query->orWhere('title', 'like' ,'Of %'); }); }) ->orderBy('year');","title":"Examples"},{"location":"query/examples/#query-examples","text":"Query reads very much as a hand coded SQL statement would: $query = new Query; $query->select('title, year')->from('movies')->where('title', 'The Lego Movie'); Query has a handy shortcut which returns a new Query instance: query()->select('title, year')->from('movies')->where('title', 'The Lego Movie'); The shortcut accepts a table name as it's only parameter: query('movies')->select('title, year')->where('title', 'The Lego Movie'); Most clauses are supported, including JOIN, ORDER BY, GROUP BY and WHERE allowing complex queries to be created: $query->select('title, directors.name') ->from('movies') ->join('directors') ->where('movies.title', 'LIKE', 'The Lego Movie%') ->groupBy('directors.name') ->orderBy('year'); /* SELECT `movies`.`title`,`directors`.`name` FROM `movies` JOIN `directors` ON `movies`.`id`=`directors`.`movies_id` WHERE `movies`.`title` LIKE %s GROUP BY `directors`.`name` ORDER BY `movies`.`year` */ The eagle eyed may notice that directors should really be a many-many relationship. It is possible to group where clauses by nesting them: // pass a lambda function as the first parameter // it will receive a new instance of Query as it's first parameter $query->select('title, year') ->from('movies') ->where(function($query) { $query->where('title', 'like' ,'A %'); $query->orWhere('title', 'like' ,'The %'); }) ->orderBy('year'); Multi level nesting is possible: $query->select('title, year') ->from('movies') ->where(function($query) { $query->where('title', 'like' ,'The %'); $query->orWhere(function($query) { $query->where('title', 'like' ,'A %'); $query->orWhere('title', 'like' ,'Of %'); }); }) ->orderBy('year');","title":"Query examples"},{"location":"query/inserting/","text":"Inserting rows The insert() method method generates SQL to insert values into the table rows. Important The insert() method should be called last. Inserting a single item Pass an associative array representing the columns and values to be inserted: $query->table('movies')->insert([ 'title' => '2001', 'year' => 1968, 'rating' => 8.3 ]); // INSERT INTO `movies` (`title`,`year`,`rating`) VALUES ('2001', '1968', '8.3'); You may also pass in an object: $movie = new StdClass; $movie->title = '2001'; $movie->year = 1968; $movie->rating = 8.3; $query->table('movies')->insert($movie); // INSERT INTO `movies` (`title`,`year`,`rating`) VALUES ('2001', '1968', '8.3'); Inserting multiple items Pass an array of associative arrays: $query->table('movies')->insert([ [ 'title' => '2001', 'year' => 1968, 'rating' => 8.3 ], [ 'title' => 'The Shining', 'year' => 1980, 'rating' => 8.4 ], [ 'title' => 'Clockwork Orange', 'year' => 1971, 'rating' => 8.3 ] ]); // INSERT INTO `movies` (`title`,`year`,`rating`) VALUES ('2001', '1968', '5'),('The Shining', '1980', '8.4'),('Clockwork Orange', '1971', '8.3'); You may also pass an array of objects: $query->table('movies')->insert([ new class { public $title = '2001'; public $year = 1968; public $rating = 8.3; }, new class { public $title = 'The Shining'; public $year = 1980; public $rating = 8.4; }, new class { public $title = 'Clockwork Orange'; public $year = 1971; public $rating = 8.3; } ]); // INSERT INTO `movies` (`title`,`year`,`rating`) VALUES ('2001', '1968', '5'),('The Shining', '1980', '8.4'),('Clockwork Orange', '1971', '8.3');","title":"Inserting rows"},{"location":"query/inserting/#inserting-rows","text":"The insert() method method generates SQL to insert values into the table rows. Important The insert() method should be called last.","title":"Inserting rows"},{"location":"query/inserting/#inserting-a-single-item","text":"Pass an associative array representing the columns and values to be inserted: $query->table('movies')->insert([ 'title' => '2001', 'year' => 1968, 'rating' => 8.3 ]); // INSERT INTO `movies` (`title`,`year`,`rating`) VALUES ('2001', '1968', '8.3'); You may also pass in an object: $movie = new StdClass; $movie->title = '2001'; $movie->year = 1968; $movie->rating = 8.3; $query->table('movies')->insert($movie); // INSERT INTO `movies` (`title`,`year`,`rating`) VALUES ('2001', '1968', '8.3');","title":"Inserting a single item"},{"location":"query/inserting/#inserting-multiple-items","text":"Pass an array of associative arrays: $query->table('movies')->insert([ [ 'title' => '2001', 'year' => 1968, 'rating' => 8.3 ], [ 'title' => 'The Shining', 'year' => 1980, 'rating' => 8.4 ], [ 'title' => 'Clockwork Orange', 'year' => 1971, 'rating' => 8.3 ] ]); // INSERT INTO `movies` (`title`,`year`,`rating`) VALUES ('2001', '1968', '5'),('The Shining', '1980', '8.4'),('Clockwork Orange', '1971', '8.3'); You may also pass an array of objects: $query->table('movies')->insert([ new class { public $title = '2001'; public $year = 1968; public $rating = 8.3; }, new class { public $title = 'The Shining'; public $year = 1980; public $rating = 8.4; }, new class { public $title = 'Clockwork Orange'; public $year = 1971; public $rating = 8.3; } ]); // INSERT INTO `movies` (`title`,`year`,`rating`) VALUES ('2001', '1968', '5'),('The Shining', '1980', '8.4'),('Clockwork Orange', '1971', '8.3');","title":"Inserting multiple items"},{"location":"query/selecting/","text":"Selecting data While Query cannot fetch data, it will generate the SQL statements to do so. The SELECT clause Adding a select() clause will assume you want to start a new query, this resets the internal Query state unless the from() or table() methods have been called. If the from() or table() methods are called before select() it is assumed you want to start a new query and the internal state will be reset. Specifying columns to select In the examples below the table() , from() and select() clauses are called in different orders, all examples are valid. The table() and from() methods can be used interchangeably. Using a comma separated string: $query->table('movies')->select('title, year, rating'); // SELECT `movies`.`title`,`movies`.`year`,`movies`.`rating` FROM `movies`; Using an array: $query->from('movies')->select(['title', 'year', 'rating']); // SELECT `movies`.`title`,`movies`.`year`,`movies`.`rating` FROM `movies`; Using the 'as' keyword to return column aliases: $query->select('title, year, rating AS r')->from('movies'); // SELECT `movies`.`title`,`movies`.`year`,`movies`.`rating` AS `r` FROM `movies`; Raw SELECT parameters Your database will offer a lot of useful functions, if you need access to them use the selectRaw() method to pass in references untouched. $query->table('movies')->select(['title', 'year', 'rating'])->selectRaw('YEAR(`year`) AS raw_year'); // 'SELECT `movies`.`title`,`movies`.`year`,`movies`.`rating`,YEAR(`year`) AS raw_year FROM `movies` Pass in an array of references: $query->table('movies')->selectRaw(['DISTINCT(COUNT(`title`)) as count_of_title', 'AVG(rating)']) // SELECT DISTINCT(COUNT(`title`)) as count_of_title, AVG(rating) FROM `movies`","title":"Selecting rows"},{"location":"query/selecting/#selecting-data","text":"While Query cannot fetch data, it will generate the SQL statements to do so.","title":"Selecting data"},{"location":"query/selecting/#the-select-clause","text":"Adding a select() clause will assume you want to start a new query, this resets the internal Query state unless the from() or table() methods have been called. If the from() or table() methods are called before select() it is assumed you want to start a new query and the internal state will be reset.","title":"The SELECT clause"},{"location":"query/selecting/#specifying-columns-to-select","text":"In the examples below the table() , from() and select() clauses are called in different orders, all examples are valid. The table() and from() methods can be used interchangeably. Using a comma separated string: $query->table('movies')->select('title, year, rating'); // SELECT `movies`.`title`,`movies`.`year`,`movies`.`rating` FROM `movies`; Using an array: $query->from('movies')->select(['title', 'year', 'rating']); // SELECT `movies`.`title`,`movies`.`year`,`movies`.`rating` FROM `movies`; Using the 'as' keyword to return column aliases: $query->select('title, year, rating AS r')->from('movies'); // SELECT `movies`.`title`,`movies`.`year`,`movies`.`rating` AS `r` FROM `movies`;","title":"Specifying columns to select"},{"location":"query/selecting/#raw-select-parameters","text":"Your database will offer a lot of useful functions, if you need access to them use the selectRaw() method to pass in references untouched. $query->table('movies')->select(['title', 'year', 'rating'])->selectRaw('YEAR(`year`) AS raw_year'); // 'SELECT `movies`.`title`,`movies`.`year`,`movies`.`rating`,YEAR(`year`) AS raw_year FROM `movies` Pass in an array of references: $query->table('movies')->selectRaw(['DISTINCT(COUNT(`title`)) as count_of_title', 'AVG(rating)']) // SELECT DISTINCT(COUNT(`title`)) as count_of_title, AVG(rating) FROM `movies`","title":"Raw SELECT parameters"},{"location":"query/updating/","text":"Updating The update() method method generates SQL to update rows in a table, it can be combined with any of the where() methods, the orderBy() and limit() methods. Important The update() method should be called last. Pass an associative array representing the columns and values to be updated: $query->table('movies') ->update([ 'archived' => 1 ]); // UPDATE `movies` SET `movies`.`archived`='1' You may also use a where() clause: $query->table('movies') ->where('year', '<', 1984) ->update([ 'archived' => 1 ]); // UPDATE `movies` SET `movies`.`archived`='1' WHERE `movies`.`year`<'1984' And the limit() clause: $query->table('movies') ->where('year', '<', 1984) ->update([ 'archived' => 1 ]) ->limit(10); // UPDATE `movies` SET `movies`.`archived`='1' WHERE `movies`.`year`<'1984' LIMIT 10 And the orderBy() clause: $query->table('movies') ->where('year', '<', 1984) ->update([ 'archived' => 1 ]) ->orderBy('year', 'desc') ->limit(10); // UPDATE `movies` SET `movies`.`archived`='1' WHERE `movies`.`year`<'1984' ORDER BY `movies`.`year` DESC LIMIT 10","title":"Updating rows"},{"location":"query/updating/#updating","text":"The update() method method generates SQL to update rows in a table, it can be combined with any of the where() methods, the orderBy() and limit() methods. Important The update() method should be called last. Pass an associative array representing the columns and values to be updated: $query->table('movies') ->update([ 'archived' => 1 ]); // UPDATE `movies` SET `movies`.`archived`='1' You may also use a where() clause: $query->table('movies') ->where('year', '<', 1984) ->update([ 'archived' => 1 ]); // UPDATE `movies` SET `movies`.`archived`='1' WHERE `movies`.`year`<'1984' And the limit() clause: $query->table('movies') ->where('year', '<', 1984) ->update([ 'archived' => 1 ]) ->limit(10); // UPDATE `movies` SET `movies`.`archived`='1' WHERE `movies`.`year`<'1984' LIMIT 10 And the orderBy() clause: $query->table('movies') ->where('year', '<', 1984) ->update([ 'archived' => 1 ]) ->orderBy('year', 'desc') ->limit(10); // UPDATE `movies` SET `movies`.`archived`='1' WHERE `movies`.`year`<'1984' ORDER BY `movies`.`year` DESC LIMIT 10","title":"Updating"},{"location":"query/clauses/aggregates/","text":"Aggregates The following aggregates are supported, as in SQL you may call more than one in the same query. COUNT() The count() method generates the SQL to count the number or results in the statement. $query->from('movies')->where('title', 'like', 'The %')->count(); // SELECT COUNT(*) AS `count` FROM `movies` WHERE `movies`.`title` LIKE ? AVG() The avg() method generates the SQL to return the average value of a column. $query->from('movies')->where('year', 2020)->avg('rating'); // SELECT AVG(`rating`) AS `avg` FROM `movies` WHERE `movies`.`year` = 2020 MIN() The min() method generates the SQL to return the minium value of a column. $query->from('movies')->where('year', 2020)->min('rating'); // SELECT MIN(`rating`) AS `min` FROM `movies` WHERE `movies`.`year` = 2020 MAX() The max() method generates the SQL to return the maxium value of a column. $query->from('movies')->where('year', 2020)->max('rating'); // SELECT MAX(`rating`) AS `max` FROM `movies` WHERE `movies`.`year` = 2020 SUM() The sum() method generates the SQL to return the total of all the values in a column. $query->from('movies')->where('year', 2020)->sum('attendance'); // SELECT SUM(`attendance`) AS `sum` FROM `movies` WHERE `movies`.`year` = 2020","title":"Aggregates"},{"location":"query/clauses/aggregates/#aggregates","text":"The following aggregates are supported, as in SQL you may call more than one in the same query.","title":"Aggregates"},{"location":"query/clauses/aggregates/#count","text":"The count() method generates the SQL to count the number or results in the statement. $query->from('movies')->where('title', 'like', 'The %')->count(); // SELECT COUNT(*) AS `count` FROM `movies` WHERE `movies`.`title` LIKE ?","title":"COUNT()"},{"location":"query/clauses/aggregates/#avg","text":"The avg() method generates the SQL to return the average value of a column. $query->from('movies')->where('year', 2020)->avg('rating'); // SELECT AVG(`rating`) AS `avg` FROM `movies` WHERE `movies`.`year` = 2020","title":"AVG()"},{"location":"query/clauses/aggregates/#min","text":"The min() method generates the SQL to return the minium value of a column. $query->from('movies')->where('year', 2020)->min('rating'); // SELECT MIN(`rating`) AS `min` FROM `movies` WHERE `movies`.`year` = 2020","title":"MIN()"},{"location":"query/clauses/aggregates/#max","text":"The max() method generates the SQL to return the maxium value of a column. $query->from('movies')->where('year', 2020)->max('rating'); // SELECT MAX(`rating`) AS `max` FROM `movies` WHERE `movies`.`year` = 2020","title":"MAX()"},{"location":"query/clauses/aggregates/#sum","text":"The sum() method generates the SQL to return the total of all the values in a column. $query->from('movies')->where('year', 2020)->sum('attendance'); // SELECT SUM(`attendance`) AS `sum` FROM `movies` WHERE `movies`.`year` = 2020","title":"SUM()"},{"location":"query/clauses/distinct/","text":"SELECT DISTINCT Use the distinct() method to return unique rows: $query->table('movies')->select(['title', 'year'])->distinct(); // SELECT DISTINCT `movies`.`title`,`movies`.`year` FROM `movies`","title":"Distinct"},{"location":"query/clauses/distinct/#select-distinct","text":"Use the distinct() method to return unique rows: $query->table('movies')->select(['title', 'year'])->distinct(); // SELECT DISTINCT `movies`.`title`,`movies`.`year` FROM `movies`","title":"SELECT DISTINCT"},{"location":"query/clauses/group-by/","text":"Group By The argument signature of the groupBy() method is the same as the orderBy() method. The groupBy() method sets the GROUP BY clause: $query->table('movies')->groupBy('year'); // SELECT * FROM `movies` GROUP BY `movies`.`year` You can group on multiple columns: $query->table('movies')->groupBy('year, rating'); // SELECT * FROM `movies` GROUP BY `movies`.`year` You can pass in an array of columns: $query->table('movies')->groupBy(['year', 'rating']); // SELECT * FROM `movies` GROUP BY `movies`.`year` Specifying the direction Passing a string: $query->table('movies')->groupBy('year, rating desc'); // SELECT * FROM `movies` GROUP BY `movies`.`year`,`movies`.`rating` DESC Passing an indexed array: $query->table('movies')->groupBy(['year', 'rating desc']); // SELECT * FROM `movies` GROUP BY `movies`.`year`,`movies`.`rating` DESC Using an associative array: $query->table('movies')->groupBy(['year'=>'asc', 'rating'=>'desc']); // SELECT * FROM `movies` GROUP BY `movies`.`year`,`movies`.`rating` DESC","title":"Group By"},{"location":"query/clauses/group-by/#group-by","text":"The argument signature of the groupBy() method is the same as the orderBy() method. The groupBy() method sets the GROUP BY clause: $query->table('movies')->groupBy('year'); // SELECT * FROM `movies` GROUP BY `movies`.`year` You can group on multiple columns: $query->table('movies')->groupBy('year, rating'); // SELECT * FROM `movies` GROUP BY `movies`.`year` You can pass in an array of columns: $query->table('movies')->groupBy(['year', 'rating']); // SELECT * FROM `movies` GROUP BY `movies`.`year`","title":"Group By"},{"location":"query/clauses/group-by/#specifying-the-direction","text":"Passing a string: $query->table('movies')->groupBy('year, rating desc'); // SELECT * FROM `movies` GROUP BY `movies`.`year`,`movies`.`rating` DESC Passing an indexed array: $query->table('movies')->groupBy(['year', 'rating desc']); // SELECT * FROM `movies` GROUP BY `movies`.`year`,`movies`.`rating` DESC Using an associative array: $query->table('movies')->groupBy(['year'=>'asc', 'rating'=>'desc']); // SELECT * FROM `movies` GROUP BY `movies`.`year`,`movies`.`rating` DESC","title":"Specifying the direction"},{"location":"query/clauses/join/","text":"Join The join() method adds related tables, you must set the table name using from() or table() before calling join() . The following shortcut methods are available; innerJoin() , outerJoin() , crossJoin() , leftJoin() and rightJoin() . $query->table('movies')->join('actors'); // SELECT * FROM `movies` JOIN `actors` ON `movies`.`id`=`actors`.`movies_id` You may specify the join columns: $query->table('movies')->join('actors', 'movies.id', 'actors.movies_id'); // SELECT * FROM `movies` JOIN `actors` ON `movies`.`id`=`actors`.`movies_id` You may also specify the operator as necessary, note the position: $query->table('movies')->join('actors', 'movies.id', '=', 'actors.movies_id'); // or add the operate after the foreign table reference $query->table('movies')->join('actors', 'movies.id', 'actors.movies_id', '='); // SELECT * FROM `movies` JOIN `actors` ON `movies`.`id`=`actors`.`movies_id` And you may also specify join type: $query->table('movies')->join('actors', 'movies.id', '=', 'actors.movies_id', 'inner'); // SELECT * FROM `movies` INNER JOIN `actors` ON `movies`.`id`=`actors`.`movies_id`","title":"Join"},{"location":"query/clauses/join/#join","text":"The join() method adds related tables, you must set the table name using from() or table() before calling join() . The following shortcut methods are available; innerJoin() , outerJoin() , crossJoin() , leftJoin() and rightJoin() . $query->table('movies')->join('actors'); // SELECT * FROM `movies` JOIN `actors` ON `movies`.`id`=`actors`.`movies_id` You may specify the join columns: $query->table('movies')->join('actors', 'movies.id', 'actors.movies_id'); // SELECT * FROM `movies` JOIN `actors` ON `movies`.`id`=`actors`.`movies_id` You may also specify the operator as necessary, note the position: $query->table('movies')->join('actors', 'movies.id', '=', 'actors.movies_id'); // or add the operate after the foreign table reference $query->table('movies')->join('actors', 'movies.id', 'actors.movies_id', '='); // SELECT * FROM `movies` JOIN `actors` ON `movies`.`id`=`actors`.`movies_id` And you may also specify join type: $query->table('movies')->join('actors', 'movies.id', '=', 'actors.movies_id', 'inner'); // SELECT * FROM `movies` INNER JOIN `actors` ON `movies`.`id`=`actors`.`movies_id`","title":"Join"},{"location":"query/clauses/limit/","text":"Limit The limit() limits the number of returned rows. You may also use the alias take() . Limiting the number of returned rows: $query->table('movies')->limit(10); // SELECT * FROM `movies` LIMIT 10","title":"Limit"},{"location":"query/clauses/limit/#limit","text":"The limit() limits the number of returned rows. You may also use the alias take() . Limiting the number of returned rows: $query->table('movies')->limit(10); // SELECT * FROM `movies` LIMIT 10","title":"Limit"},{"location":"query/clauses/offset/","text":"Offset The offset() method shifts the start position of the returned results. You may also use the alias skip() . Important The limit() method must be called when using offset() . Limit the number of returned rows with an offset for pagination: $query->table('movies')->limit(10)->offset(40); // SELECT * FROM `movies` LIMIT 10 OFFSET 40","title":"Offset"},{"location":"query/clauses/offset/#offset","text":"The offset() method shifts the start position of the returned results. You may also use the alias skip() . Important The limit() method must be called when using offset() . Limit the number of returned rows with an offset for pagination: $query->table('movies')->limit(10)->offset(40); // SELECT * FROM `movies` LIMIT 10 OFFSET 40","title":"Offset"},{"location":"query/clauses/order-by/","text":"Order By The orderBy() method sets the ORDER BY clause. $query->table('movies')->orderBy('rating'); // SELECT * FROM `movies` ORDER BY `movies`.`rating` You can specify the direction, defaults to ascending: $query->table('movies')->orderBy('rating', 'desc'); // SELECT * FROM `movies` ORDER BY `movies`.`rating` DESC You can set multiple columns separated by commas: $query->table('movies')->orderBy('year, rating'); // SELECT * FROM `movies` ORDER BY `movies`.`year`,`movies`.`rating` Or call orderBy() more than once: $query->table('movies')->orderBy('year')->orderBy('rating', 'desc'); // SELECT * FROM `movies` ORDER BY `movies`.`year`,`movies`.`rating` DESC Specifying the direction You can set multiple columns specifying a direction for each: $query->table('movies')->orderBy('year, rating DESC'); // SELECT * FROM `movies` ORDER BY `movies`.`year`,`movies`.`rating` DESC You can pass in an array: $query->table('movies')->orderBy(['year desc', 'rating']); // SELECT * FROM `movies` ORDER BY `movies`.`year` DESC,`movies`.`rating` Or an associative array where the keys are the column references and the value the direction: $query->table('movies')->orderBy(['year'=>'desc', 'rating'=>'asc']); // SELECT * FROM `movies` ORDER BY `movies`.`year` DESC,`movies`.`rating` Random ordering Use the orderByRand() method to order the rows at random: $query->table('movies')->orderByRand(); // SELECT * FROM `movies` ORDER BY RAND() Note The orderByRand() method will will probably not work as expected if combined with additional orderBy clauses","title":"Order By"},{"location":"query/clauses/order-by/#order-by","text":"The orderBy() method sets the ORDER BY clause. $query->table('movies')->orderBy('rating'); // SELECT * FROM `movies` ORDER BY `movies`.`rating` You can specify the direction, defaults to ascending: $query->table('movies')->orderBy('rating', 'desc'); // SELECT * FROM `movies` ORDER BY `movies`.`rating` DESC You can set multiple columns separated by commas: $query->table('movies')->orderBy('year, rating'); // SELECT * FROM `movies` ORDER BY `movies`.`year`,`movies`.`rating` Or call orderBy() more than once: $query->table('movies')->orderBy('year')->orderBy('rating', 'desc'); // SELECT * FROM `movies` ORDER BY `movies`.`year`,`movies`.`rating` DESC","title":"Order By"},{"location":"query/clauses/order-by/#specifying-the-direction","text":"You can set multiple columns specifying a direction for each: $query->table('movies')->orderBy('year, rating DESC'); // SELECT * FROM `movies` ORDER BY `movies`.`year`,`movies`.`rating` DESC You can pass in an array: $query->table('movies')->orderBy(['year desc', 'rating']); // SELECT * FROM `movies` ORDER BY `movies`.`year` DESC,`movies`.`rating` Or an associative array where the keys are the column references and the value the direction: $query->table('movies')->orderBy(['year'=>'desc', 'rating'=>'asc']); // SELECT * FROM `movies` ORDER BY `movies`.`year` DESC,`movies`.`rating`","title":"Specifying the direction"},{"location":"query/clauses/order-by/#random-ordering","text":"Use the orderByRand() method to order the rows at random: $query->table('movies')->orderByRand(); // SELECT * FROM `movies` ORDER BY RAND() Note The orderByRand() method will will probably not work as expected if combined with additional orderBy clauses","title":"Random ordering"},{"location":"query/clauses/pagination/","text":"Pagination There are two additional methods provided to support pagination. Paginate A shortcut to the offset and limit clauses: $query->table('movies')->paginate($skip=110, $take=10); // SELECT * FROM `movies` LIMIT 10 OFFSET 110","title":"Pagination"},{"location":"query/clauses/pagination/#pagination","text":"There are two additional methods provided to support pagination.","title":"Pagination"},{"location":"query/clauses/pagination/#paginate","text":"A shortcut to the offset and limit clauses: $query->table('movies')->paginate($skip=110, $take=10); // SELECT * FROM `movies` LIMIT 10 OFFSET 110","title":"Paginate"},{"location":"query/clauses/unions/","text":"Unions The UNION clause combines the rows from multiple SELECT statements into a single result, removing any duplicate rows. Each SELECT statement can be sorted as well as the final result. Note The column names of each SELECT statement must match. Union The union() method accepts a number of other Queries as it's arguments: // Create the initial query $a = new Query(); $a->from('movies')->where('title', 'like', 'a%'); // Create the query to union with $z = new Query(); $z->from('movies')->where('title', 'like', 'z%'); // Add the queries as arguments to union() $a->union($z); /* (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'a%') UNION (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'z%') */ You may add as many queries as necessary: // Create the initial query $a = new Query(); $a->from('movies')->where('title', 'like', 'a%'); // Create the queries to union with $x = new Query(); $y = new Query(); $z = new Query(); $x->from('movies')->where('title', 'like', 'x%'); $y->from('movies')->where('title', 'like', 'y%'); $z->from('movies')->where('title', 'like', 'z%'); // Add all queries as arguments to union() $a->union($x, $y, $z); /* (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'a%') UNION (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'x%') UNION (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'y%') UNION (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'z%') */ You may specify the sort order of the results of the union: $a = new Query(); $a->from('movies')->where('title', 'like', 'a%'); $z = new Query(); $z->from('movies')->where('title', 'like', 'z%'); // the orderBy clause works on the UNION results as expected $a->union($z)->orderBy('year desc'); /* (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'a%') UNION (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'z%') ORDER BY `movies`.`year` DESC */ And paginate the results of the union: $a = new Query(); $a->from('movies')->where('title', 'like', 'a%'); $z = new Query(); $z->from('movies')->where('title', 'like', 'z%'); // the orderBy, limit and offset clauses work on the UNION results as expected $a->union($z)->orderBy('year desc')->limit(10)->offset(40); /* (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'a%') UNION (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'z%') ORDER BY `movies`.`year` DESC LIMIT 10 OFFSET 40 */ Union All Calling the unionAll() method will return all duplicate rows. $a = query('movies')->where('title', 'like', 'a%'); $z = query('movies')->where('title', 'like', 'z%'); // the orderBy, limit and offset clauses work on the UNION results as expected $a->unionAll($z); /* (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'a%') UNION ALL (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'z%') */","title":"Unions"},{"location":"query/clauses/unions/#unions","text":"The UNION clause combines the rows from multiple SELECT statements into a single result, removing any duplicate rows. Each SELECT statement can be sorted as well as the final result. Note The column names of each SELECT statement must match.","title":"Unions"},{"location":"query/clauses/unions/#union","text":"The union() method accepts a number of other Queries as it's arguments: // Create the initial query $a = new Query(); $a->from('movies')->where('title', 'like', 'a%'); // Create the query to union with $z = new Query(); $z->from('movies')->where('title', 'like', 'z%'); // Add the queries as arguments to union() $a->union($z); /* (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'a%') UNION (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'z%') */ You may add as many queries as necessary: // Create the initial query $a = new Query(); $a->from('movies')->where('title', 'like', 'a%'); // Create the queries to union with $x = new Query(); $y = new Query(); $z = new Query(); $x->from('movies')->where('title', 'like', 'x%'); $y->from('movies')->where('title', 'like', 'y%'); $z->from('movies')->where('title', 'like', 'z%'); // Add all queries as arguments to union() $a->union($x, $y, $z); /* (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'a%') UNION (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'x%') UNION (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'y%') UNION (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'z%') */ You may specify the sort order of the results of the union: $a = new Query(); $a->from('movies')->where('title', 'like', 'a%'); $z = new Query(); $z->from('movies')->where('title', 'like', 'z%'); // the orderBy clause works on the UNION results as expected $a->union($z)->orderBy('year desc'); /* (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'a%') UNION (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'z%') ORDER BY `movies`.`year` DESC */ And paginate the results of the union: $a = new Query(); $a->from('movies')->where('title', 'like', 'a%'); $z = new Query(); $z->from('movies')->where('title', 'like', 'z%'); // the orderBy, limit and offset clauses work on the UNION results as expected $a->union($z)->orderBy('year desc')->limit(10)->offset(40); /* (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'a%') UNION (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'z%') ORDER BY `movies`.`year` DESC LIMIT 10 OFFSET 40 */","title":"Union"},{"location":"query/clauses/unions/#union-all","text":"Calling the unionAll() method will return all duplicate rows. $a = query('movies')->where('title', 'like', 'a%'); $z = query('movies')->where('title', 'like', 'z%'); // the orderBy, limit and offset clauses work on the UNION results as expected $a->unionAll($z); /* (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'a%') UNION ALL (SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'z%') */","title":"Union All"},{"location":"query/clauses/where/","text":"Where Use the WHERE clauses to filter results, there are various helper methods available including whereNot() , orWhere() , orWhereNot() , whereColumn() Method arguments All where methods have a similar very flexible argument signature, they can be called with strings and some methods accept a callable which is used when nesting where clauses. Skipping the comparison operator assumes '=' query('movies')->where('title', 'The Lego Movie'); // SELECT * FROM `movies` WHERE `movies`.`title` = 'The Lego Movie' Any of the normal comparison operators may be used including =, <>, !=, >, >=, <, <= or LIKE: query('movies')->where('title', 'LIKE', 'The Lego Movie%'); // SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'The Lego Movie%' You may call where() multiple times, they will produce AND where statements: query('movies')->where('year', 2020)->where('rating', '>', 8); // SELECT * FROM `movies` WHERE `movies`.`year` = 2020 AND `movies`.`rating` > 8 You may nest where() clauses: query('movies')->where(function($query) { $query->where('year', 2020); $query->orWhere('rating', '>', 8); }); // SELECT * FROM `movies` WHERE (`movies`.`year` = 2020 OR `movies`.`rating` > 8) As deep as necessary: query('movies')->where(function($query) { $query->where('year', 2020); $query->whereNot(function($query) { $query->where('rating', '<', 2); $query->orWhere('rating', '>', 8); }); }); /* SELECT * FROM `movies` WHERE ( `movies`.`year`='2020' AND NOT ( `movies`.`rating`<'2' OR `movies`.`rating`>'8' ) ) Where Between Use the WHERE BETWEEN clause to check if a column is between two other values. The helper methods available include whereNotBetween() , orWhereBetween() and orWhereNotBetween() query('movies')->whereBetween('year', [2010, 2020]); // SELECT * FROM `movies` WHERE `movies`.`year` BETWEEN 2010 AND 2020 query('movies')->whereBetween('year', [2010, 2020])->orWhereBetween('year', [1990, 2000]); // SELECT * FROM `movies` WHERE `movies`.`year` BETWEEN 2010 AND 2020 OR `movies`.`year` BETWEEN 1990 AND 2000 Where Column This is not an SQL construct, however we use it in Query to compare two columns to enable the sanity checking of both table/column references. Skipping the comparison operator assumes '=': query('movies')->join('directors')->whereColumn('director', 'directors'.'name'); // SELECT * FROM `movies` JOIN `directors` ON `movies`.`id`=`directors`.`movie_id` WHERE `movies`.`director` = `directors`.`name` Any of the normal comparison operators may be used including =, <>, !=, >, >=, <, <= or LIKE: query('movies')->join('directors')->whereColumn('director', '<>', 'directors'.'name'); // SELECT * FROM `movies` JOIN `directors` ON `movies`.`id`=`directors`.`movie_id` WHERE `movies`.`director` <> `directors`.`name` Where Exists The WHERE EXISTS clause will return results from the query if the whereExists() subquery returns one or more rows. query('movies') ->where('year', 2020) ->whereExists(function($query) { $query->from('tags') ->join('movies__tags') ->whereColumn('movies.id', '=', 'movies__tags.movies_id') ->where('name', 'Must see'); }); /* -- A slightly convoluted example SELECT * FROM `movies` WHERE `movies`.`year` = 2020 AND EXISTS ( SELECT * FROM `tags` JOIN `movies__tags` ON `movies`.`id`=`movies__tags`.`movies_id` WHERE `movies`.`id`=`movies__tags`.`movies_id` AND `tags`.`name`='Must see' ); Where In Use the WHERE IN clause to check if a column contains any value in a range of values. The shortcut methods available include whereNotIn() , orWhereIn() and orWhereNotIn() query('movies')->whereIn('year', [2010, 2012, 2014]); // SELECT * FROM `movies` WHERE `movies`.`year` IN (2010, 2012, 2014) The whereIn() method also supports nested queries: query('movies')->whereIn('id', function($query) { $query->select('movie_id') ->from('best_of') ->whereIn('genre', ['sci-fi','comedy']); }); // SELECT * FROM `movies` WHERE `movies`.`id` IN (SELECT `best_of`.`movie_id` FROM `best_of` WHERE `best_of`.`genre` IN ('sci-fi', 'comedy')); Where Null Use the WHERE NULL clause to check if a column value is null. The shortcut methods available include whereNotNull() , orWhereNull() and orWhereNotNull() query('movies')->whereNull('rating'); // SELECT * FROM `movies` WHERE `movies`.`rating` IS NULL Using the helper methods: query('movies')->whereNotNull('rating'); // SELECT * FROM `movies` WHERE `movies`.`rating` IS NOT NULL You may chain methods together: query('movies')->whereNotNull('rating')->orWhereNull('reviews'); // SELECT * FROM `movies` WHERE `movies`.`rating` IS NOT NULL OR `movies`.`reviews` IS NULL","title":"Where"},{"location":"query/clauses/where/#where","text":"Use the WHERE clauses to filter results, there are various helper methods available including whereNot() , orWhere() , orWhereNot() , whereColumn()","title":"Where"},{"location":"query/clauses/where/#method-arguments","text":"All where methods have a similar very flexible argument signature, they can be called with strings and some methods accept a callable which is used when nesting where clauses. Skipping the comparison operator assumes '=' query('movies')->where('title', 'The Lego Movie'); // SELECT * FROM `movies` WHERE `movies`.`title` = 'The Lego Movie' Any of the normal comparison operators may be used including =, <>, !=, >, >=, <, <= or LIKE: query('movies')->where('title', 'LIKE', 'The Lego Movie%'); // SELECT * FROM `movies` WHERE `movies`.`title` LIKE 'The Lego Movie%' You may call where() multiple times, they will produce AND where statements: query('movies')->where('year', 2020)->where('rating', '>', 8); // SELECT * FROM `movies` WHERE `movies`.`year` = 2020 AND `movies`.`rating` > 8 You may nest where() clauses: query('movies')->where(function($query) { $query->where('year', 2020); $query->orWhere('rating', '>', 8); }); // SELECT * FROM `movies` WHERE (`movies`.`year` = 2020 OR `movies`.`rating` > 8) As deep as necessary: query('movies')->where(function($query) { $query->where('year', 2020); $query->whereNot(function($query) { $query->where('rating', '<', 2); $query->orWhere('rating', '>', 8); }); }); /* SELECT * FROM `movies` WHERE ( `movies`.`year`='2020' AND NOT ( `movies`.`rating`<'2' OR `movies`.`rating`>'8' ) )","title":"Method arguments"},{"location":"query/clauses/where/#where-between","text":"Use the WHERE BETWEEN clause to check if a column is between two other values. The helper methods available include whereNotBetween() , orWhereBetween() and orWhereNotBetween() query('movies')->whereBetween('year', [2010, 2020]); // SELECT * FROM `movies` WHERE `movies`.`year` BETWEEN 2010 AND 2020 query('movies')->whereBetween('year', [2010, 2020])->orWhereBetween('year', [1990, 2000]); // SELECT * FROM `movies` WHERE `movies`.`year` BETWEEN 2010 AND 2020 OR `movies`.`year` BETWEEN 1990 AND 2000","title":"Where Between"},{"location":"query/clauses/where/#where-column","text":"This is not an SQL construct, however we use it in Query to compare two columns to enable the sanity checking of both table/column references. Skipping the comparison operator assumes '=': query('movies')->join('directors')->whereColumn('director', 'directors'.'name'); // SELECT * FROM `movies` JOIN `directors` ON `movies`.`id`=`directors`.`movie_id` WHERE `movies`.`director` = `directors`.`name` Any of the normal comparison operators may be used including =, <>, !=, >, >=, <, <= or LIKE: query('movies')->join('directors')->whereColumn('director', '<>', 'directors'.'name'); // SELECT * FROM `movies` JOIN `directors` ON `movies`.`id`=`directors`.`movie_id` WHERE `movies`.`director` <> `directors`.`name`","title":"Where Column"},{"location":"query/clauses/where/#where-exists","text":"The WHERE EXISTS clause will return results from the query if the whereExists() subquery returns one or more rows. query('movies') ->where('year', 2020) ->whereExists(function($query) { $query->from('tags') ->join('movies__tags') ->whereColumn('movies.id', '=', 'movies__tags.movies_id') ->where('name', 'Must see'); }); /* -- A slightly convoluted example SELECT * FROM `movies` WHERE `movies`.`year` = 2020 AND EXISTS ( SELECT * FROM `tags` JOIN `movies__tags` ON `movies`.`id`=`movies__tags`.`movies_id` WHERE `movies`.`id`=`movies__tags`.`movies_id` AND `tags`.`name`='Must see' );","title":"Where Exists"},{"location":"query/clauses/where/#where-in","text":"Use the WHERE IN clause to check if a column contains any value in a range of values. The shortcut methods available include whereNotIn() , orWhereIn() and orWhereNotIn() query('movies')->whereIn('year', [2010, 2012, 2014]); // SELECT * FROM `movies` WHERE `movies`.`year` IN (2010, 2012, 2014) The whereIn() method also supports nested queries: query('movies')->whereIn('id', function($query) { $query->select('movie_id') ->from('best_of') ->whereIn('genre', ['sci-fi','comedy']); }); // SELECT * FROM `movies` WHERE `movies`.`id` IN (SELECT `best_of`.`movie_id` FROM `best_of` WHERE `best_of`.`genre` IN ('sci-fi', 'comedy'));","title":"Where In"},{"location":"query/clauses/where/#where-null","text":"Use the WHERE NULL clause to check if a column value is null. The shortcut methods available include whereNotNull() , orWhereNull() and orWhereNotNull() query('movies')->whereNull('rating'); // SELECT * FROM `movies` WHERE `movies`.`rating` IS NULL Using the helper methods: query('movies')->whereNotNull('rating'); // SELECT * FROM `movies` WHERE `movies`.`rating` IS NOT NULL You may chain methods together: query('movies')->whereNotNull('rating')->orWhereNull('reviews'); // SELECT * FROM `movies` WHERE `movies`.`rating` IS NOT NULL OR `movies`.`reviews` IS NULL","title":"Where Null"}]}